/******************** (C) COPYRIGHT 2009 STMicroelectronics ********************
* File Name          : main.c
* Author             : MCD Application Team
* Version            : V1.0
* Date               : 09/12/2009
* Description        : Main program body
********************************************************************************
* THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
* WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
* AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
* INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
* CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
* INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
*******************************************************************************/

/* Includes ------------------------------------------------------------------*/
#include "stm32f10x_lib.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
#define ADC1_DR_Address    ((u32)0x4001244C)

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
vu16  ADC_ConvertedValue;

/* Private function prototypes -----------------------------------------------*/
void  Delay_Ms(u16 time);
void  RCC_Configuration(void);
void  GPIO_Configuration(void);
void  NVIC_Configuration(void);
void  EXTI_Configuration(void);
void  ADC_Configuration(void);

extern void lcd_init     (void);
extern void lcd_clear    (void);
extern void lcd_putchar  (char c);
extern void set_cursor   (int column, int line);
extern void lcd_print    (char *string);
extern void lcd_bargraph (int pos_x, int pos_y, int value);   // STM32 Initialization

/* Private functions ---------------------------------------------------------*/ 
/*******************************************************************************
* Function Name  : main
* Description    : Main program.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int main(void)
{
#ifdef DEBUG
  	debug();
#endif

	u16 dat1,buf;
	u8  lcd[15],key,i;

  	/* System Clocks Configuration */
  	RCC_Configuration();

  	/* Configure the GPIOs */
  	GPIO_Configuration();

	/* NVIC configuration */
  	NVIC_Configuration();

	/* EXTI configuration */
//	EXTI_Configuration();

	/* ADC configuration */
	ADC_Configuration();
	
	lcd_init();
    lcd_clear();
    lcd_print_S("STM32_ADC!");
    Delay_Ms(10);
  
	ADC_ConvertedValue = 0;

	while (1)  //ADC_GetDualModeConversionValue(); 	ADC_ConvertedValue;//
  	{
		buf = ADC_GetConversionValue(ADC1);	 // ·µ»Ø×î½üÒ»´ÎADC1¹æÔò×éµÄ×ª»»½á¹û £»
		lcd[0] = buf/10000+0x30;
		dat1 = buf%10000;
		lcd[1] = dat1/1000+0x30;
		dat1 = dat1%1000;
		lcd[2] = dat1/100+0x30;	
		dat1 = dat1%100;
		lcd[3] = dat1/10+0x30;	
		lcd[4] = dat1%10+0x30;	
		set_cursor(11,0);
		lcd_print_S(lcd);

		for(i=0;i<16;i++)
			lcd[i] = ' ';	
		for(i=0;i<16;i++)
		{
			lcd[i] = '*';
			if(i==(buf/256))
				break;	
		}

		set_cursor(0,1);
	//	lcd_print_S("ADC:");
	//	set_cursor(4,1);
		lcd_print_S(lcd);

	/*	key = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_8);
		if(key==0)
		{	
   			GPIO_SetBits(GPIOB,GPIO_Pin_10);
   			GPIO_SetBits(GPIOB,GPIO_Pin_11);

			while(key==0)  // °´¼üÊÍ·Å £»
			{
				key = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_8);	
			}
		}

		key = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0);
		if(key==0)	
		{
   			GPIO_ResetBits(GPIOB,GPIO_Pin_10);
   			GPIO_ResetBits(GPIOB,GPIO_Pin_11);

			while(key==0)  // °´¼üÊÍ·Å £»
			{
				key = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0);	
			}  
		} */

		Delay_Ms(100);
  	}
}

/*******************************************************************************
* Function Name  : Delay_Ms
* Description    : delay 1 ms.
* Input          : time (ms)
* Output         : None
* Return         : None
*******************************************************************************/
void Delay_Ms(u16 time)  //ÑÓÊ±º¯Êý
{ 
	u16 i,j;
	for(i=0;i<time;i++)
  		for(j=0;j<10260;j++)
    		;
}

/*******************************************************************************
* Function Name  : RCC_Configuration
* Description    : Configures the different system clocks.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_Configuration(void)
{
	/* RCC system reset(for debug purpose) */
  	RCC_DeInit();

  	/* Enable HSE */
  	RCC_HSEConfig(RCC_HSE_ON);

  	/* Wait till HSE is ready */
  	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);

    /* Enable Prefetch Buffer */
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);
 
    /* HCLK = SYSCLK */
    RCC_HCLKConfig(RCC_SYSCLK_Div1);
  
    /* PCLK2 = HCLK */
    RCC_PCLK2Config(RCC_HCLK_Div1);

    /* PCLK1 = HCLK/2 */
    RCC_PCLK1Config(RCC_HCLK_Div2);

    /* PLLCLK = 8MHz * 9 = 72 MHz */
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);

    /* Enable PLL */ 
    RCC_PLLCmd(ENABLE);

    /* Wait till PLL is ready */
    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);

    /* Wait till PLL is used as system clock source */
    while(RCC_GetSYSCLKSource() != 0x08);

  	/* Enable GPIOA, GPIOC, ADC1 and TIM1 clock */
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC |
                           RCC_APB2Periph_ADC1 |  RCC_APB2Periph_ADC2, ENABLE);
}

/*******************************************************************************
* Function Name  : NVIC_Configuration
* Description    : Configures the nested vectored interrupt controller.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{   
	NVIC_InitTypeDef NVIC_InitStructure;

#ifdef  VECT_TAB_RAM  
  	/* Set the Vector Table base location at 0x20000000 */ 
  	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
#else  /* VECT_TAB_FLASH  */
  	/* Set the Vector Table base location at 0x08000000 */ 
  	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
#endif
	
	/* Enable ADC IRQChannel */
  /*	NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQChannel;
  	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  	NVIC_Init(&NVIC_InitStructure);*/
}

/*******************************************************************************
* Function Name  : GPIO_Configuration
* Description    : Configures the different GPIO ports.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
  	GPIO_InitTypeDef GPIO_InitStructure;

  	/* Configure Pb.8-11 as output push-pull */
  	GPIO_InitStructure.GPIO_Pin	= GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11;//Ñ¡ÔñPX.8-11
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//¹Ü½ÅÆµÂÊÎª50MHZ
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	//Ä£Ê½ÎªÍÆÍìÊä³ö
  	GPIO_Init(GPIOB, &GPIO_InitStructure);   //³õÊ¼»¯GPIOB¼Ä´æÆ÷

  	/* Configure PA.01  (ADC Channel1) as analog input */
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
  	GPIO_Init(GPIOA, &GPIO_InitStructure);
	/* Configure PC.01  (ADC Channel11) as analog input */
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
  	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin	= GPIO_Pin_0|GPIO_Pin_8;//Ñ¡ÔñPX.0 8
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//¹Ü½ÅÆµÂÊÎª50MHZ
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;//ÉèÖÃÎªÏÂÀ­ÊäÈë
  	GPIO_Init(GPIOA , &GPIO_InitStructure);//³õÊ¼»¯GPIOA¼Ä´æÆ÷

	/* Configure EXTI line15 ------------*/
  /*	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  	GPIO_Init(GPIOB, &GPIO_InitStructure);	 */
}

/*******************************************************************************
* Function Name  : EXTI_Configuration
* Description    : Configures the different EXTI lines.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI_Configuration(void)
{
  	EXTI_InitTypeDef EXTI_InitStructure;

  	/* Select the EXTI Line15 the GPIO pin source */
  	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource15); // Ñ¡ÕßGPIO¹Ü½ÅÓÃ×÷Íâ²¿ÖÐ¶ÏÏßÂ· £»
  	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Event;	// ÉèÖÃEXTIÏßÂ·ÎªÊÂ¼þÇëÇó £»
  	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; // ÉèÖÃÊäÈëÏßÂ·ÏÂÉýÑØÎªÖÐ¶ÏÇëÇó £»
  	EXTI_InitStructure.EXTI_Line = EXTI_Line15;
  	EXTI_InitStructure.EXTI_LineCmd = ENABLE; // ÖÐ¶ÏÊ¹ÄÜ £»
  	EXTI_Init(&EXTI_InitStructure);
}

void ADC_Configuration(void)
{
	ADC_InitTypeDef ADC_InitStructure;

  	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; // ADC1ºÍADC2¹¤×÷ÔÚ¶ÀÁ¢Ä£Ê½ £»
  	ADC_InitStructure.ADC_ScanConvMode = ENABLE;  // Ä£Êý×ª»»¹¤×÷ÔÚÉ¨ÃèÄ£Ê½£¨¶àÍ¨µÀ£©Ä£Ê½ £»
  	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE; // Ä£Êý×ª»»¹¤×÷ÔÚÁ¬ÐøÄ£Ê½ ;
  	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	// ×ª»»ÓÉÈí¼þ¶ø²»ÊÇÍâ²¿´¥·¢Æô¶¯ £»
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; // ADCÊý¾ÝÓÒ¶ÔÆë £»
  	ADC_InitStructure.ADC_NbrOfChannel = 1; // Ë³Ðò½øÐÐ¹æÔò×ª»»µÄADCÍ¨µÀµÄÊýÄ¿ 1 ;
  	ADC_Init(ADC1, &ADC_InitStructure);
 
	// ÉèÖÃÖ¸¶¨ADCµÄ¹æÔò×éÍ¨µÀ1£¬ÉèÖÃËüÃÇµÄ×ª»¯Ë³ÐòºÍ²ÉÑùÊ±¼äÎª55.5ÖÜÆÚ £»
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_55Cycles5);

  	ADC_DMACmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADCµÄDMAÇëÇó £»
  	ADC_Cmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADC £»

  	ADC_ResetCalibration(ADC1);	// ÖØÖÃÖ¸¶¨µÄADCµÄÐ£×¼¼Ä´æÆ÷ £»
  	while(ADC_GetResetCalibrationStatus(ADC1)); // »ñÈ¡ADCÖØÖÃÐ£×¼¼Ä´æÆ÷µÄ×´Ì¬ £»

  	ADC_StartCalibration(ADC1);	 // ¿ªÊ¼Ö¸¶¨ADCµÄÐ£×¼³ÌÐò £»
  	while(ADC_GetCalibrationStatus(ADC1)); // »ñÈ¡Ö¸¶¨ADCµÄÐ£×¼×´Ì¬ £»
     
  	ADC_SoftwareStartConvCmd(ADC1, ENABLE);	// Ê¹ÄÜÖ¸¶¨µÄADCµÄÈí¼þ×ª»»Æô¶¯¹¦ÄÜ £»
	

/*	//* ADC1 configuration ---------------------------------------------
  	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; // ADC1ºÍADC2¹¤×÷ÔÚ¶ÀÁ¢Ä£Ê½ £»
  	ADC_InitStructure.ADC_ScanConvMode = ENABLE;//DISABLE;
  	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;//DISABLE;
  	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	// ×ª»»ÓÉÈí¼þ¶ø²»ÊÇÍâ²¿´¥·¢Æô¶¯ £»
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  	ADC_InitStructure.ADC_NbrOfChannel = 1;
  	ADC_Init(ADC1, &ADC_InitStructure);

  	ADC_InjectedSequencerLengthConfig(ADC1, 1);	// ÉèÖÃ×¢Èë×éÍ¨µÀµÄ×ª»»ÐòÁÐ³¤¶È £»
  	ADC_InjectedChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_239Cycles5);
	// ÅäÖÃADCxµÄÍâ²¿´¥·¢Æô¶¯×¢Èë×é×ª»»¹¦ÄÜ,×¢Èë×ª»»ÓÉÈí¼þ¶ø²»ÊÇÍâ²¿´¥·¢Æô¶¯ £»
  	ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_None);

  	ADC_AutoInjectedConvCmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨ADCÔÚ¹æÔò×é×ª»¯ºó×Ô¶¯¿ªÊ¼×¢Èë×é×ª»» £»
  	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADCµÄÖÐ¶Ï	;
  	ADC_Cmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADC £»

  	ADC_ResetCalibration(ADC1);	// ÖØÖÃÖ¸¶¨µÄADCµÄÐ£×¼¼Ä´æÆ÷ £»
  	while(ADC_GetResetCalibrationStatus(ADC1));	 // »ñÈ¡ADCÖØÖÃÐ£×¼¼Ä´æÆ÷µÄ×´Ì¬ £»

  	ADC_StartCalibration(ADC1);	 // ¿ªÊ¼Ö¸¶¨ADCµÄÐ£×¼³ÌÐò £»
  	while(ADC_GetCalibrationStatus(ADC1)); // »ñÈ¡Ö¸¶¨ADCµÄÐ£×¼×´Ì¬ £»

	ADC_SoftwareStartConvCmd(ADC1, ENABLE);	// Ê¹ÄÜÖ¸¶¨µÄADCµÄÈí¼þ×ª»»Æô¶¯¹¦ÄÜ £»
*/

/*	// ADC1 Configuration ----------------------/
  	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
  	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  	ADC_InitStructure.ADC_NbrOfChannel = 1;
  	ADC_Init(ADC1, &ADC_InitStructure);
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_13Cycles5);
  	ADC_AnalogWatchdogThresholdsConfig(ADC1, 0x0B00, 0x0300); // ÉèÖÃÄ£Äâ¿´ÃÅ¹·µÄ¸ß/µÍãÐÖµ2816-768 £»
  	ADC_AnalogWatchdogSingleChannelConfig(ADC1, ADC_Channel_1);	// ¶Ôµ¥¸öADCÍ¨µÀÉèÖÃÄ£Äâ¿´ÃÅ¹· £»
  	ADC_AnalogWatchdogCmd(ADC1, ADC_AnalogWatchdog_SingleRegEnable);// Ê¹ÄÜÖ¸¶¨µ¥¸ö/È«Ìå£¬
  	ADC_ITConfig(ADC1, ADC_IT_AWD, ENABLE);	// Ê¹ÄÜÖ¸¶¨µÄADCµÄAWDOGÖÐ¶ÏÆÁ±ÎÖÐ¶Ï ;
  	ADC_Cmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADC £»
  	ADC_ResetCalibration(ADC1);	// ÖØÖÃÖ¸¶¨µÄADCµÄÐ£×¼¼Ä´æÆ÷ £»
  	while(ADC_GetResetCalibrationStatus(ADC1));	 // »ñÈ¡ADCÖØÖÃÐ£×¼¼Ä´æÆ÷µÄ×´Ì¬ £»
  	ADC_ResetCalibration(ADC1);	// ÖØÖÃÖ¸¶¨µÄADCµÄÐ£×¼¼Ä´æÆ÷ £»
  	while(ADC_GetResetCalibrationStatus(ADC1));	 // »ñÈ¡ADCÖØÖÃÐ£×¼¼Ä´æÆ÷µÄ×´Ì¬ 
  	ADC_SoftwareStartConvCmd(ADC1, ENABLE);	// Ê¹ÄÜÖ¸¶¨µÄADCµÄÈí¼þ×ª»»Æô¶¯¹¦ÄÜ £»
*/

/*    //* ADC1 configuration -----------------
  	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
  	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
  	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4;
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 	ADC_InitStructure.ADC_NbrOfChannel = 2;
  	ADC_Init(ADC1, &ADC_InitStructure);
  	ADC_InjectedSequencerLengthConfig(ADC1, 1);	// ÉèÖÃ×¢Èë×éÍ¨µÀµÄ×ª»»ÐòÁÐ³¤¶È £»
  	ADC_InjectedChannelConfig(ADC1, ADC_Channel_11, 1, ADC_SampleTime_239Cycles5);
	// ÅäÖÃADCxµÄÍâ²¿´¥·¢Æô¶¯×¢Èë×é×ª»»¹¦ÄÜ,×¢Èë×ª»»ÓÉÈí¼þ¶ø²»ÊÇÍâ²¿´¥·¢Æô¶¯ £»
  	ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_None);
  	ADC_AutoInjectedConvCmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨ADCÔÚ¹æÔò×é×ª»¯ºó×Ô¶¯¿ªÊ¼×¢Èë×é×ª»» £»
  	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADCµÄÖÐ¶Ï	;
  	ADC_Cmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADC £»
  	// ÅäÖÃADCxµÄÍâ²¿´¥·¢Æô¶¯×¢Èë×é×ª»»¹¦ÄÜ £»
  	ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4);
  	ADC_ExternalTrigInjectedConvCmd(ADC1, ENABLE); // Ê¹ÄÜADC1µÄ¾­Íâ²¿´¥·¢Æô¶¯×¢Èë×é×ª»»¹¦ÄÜ £»
  	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADCµÄJEOCÖÐ¶ÏÆÁ±ÎÖÐ¶Ï ;
  	ADC_DMACmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADCµÄDMAÇëÇó £»
  	ADC_Cmd(ADC1, ENABLE); // Ê¹ÄÜÖ¸¶¨µÄADC £»
  	ADC_ResetCalibration(ADC1);	// ÖØÖÃÖ¸¶¨µÄADCµÄÐ£×¼¼Ä´æÆ÷ £»
  	while(ADC_GetResetCalibrationStatus(ADC1));	 // »ñÈ¡ADCÖØÖÃÐ£×¼¼Ä´æÆ÷µÄ×´Ì¬ £»
  	ADC_ResetCalibration(ADC1);	// ÖØÖÃÖ¸¶¨µÄADCµÄÐ£×¼¼Ä´æÆ÷ £»
  	while(ADC_GetResetCalibrationStatus(ADC1));	 // »ñÈ¡ADCÖØÖÃÐ£×¼¼Ä´æÆ÷µÄ×´Ì¬ 
  	ADC_SoftwareStartConvCmd(ADC1, ENABLE);	// Ê¹ÄÜÖ¸¶¨µÄADCµÄÈí¼þ×ª»»Æô¶¯¹¦ÄÜ £»
*/
}

#ifdef  DEBUG
/*******************************************************************************
* Function Name  : assert_failed
* Description    : Reports the name of the source file and the source line number
*                  where the assert_param error has occurred.
* Input          : - file: pointer to the source file name
*                  - line: assert_param error line source number
* Output         : None
* Return         : None
*******************************************************************************/
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/******************* (C) COPYRIGHT 2009 STMicroelectronics *****END OF FILE****/
